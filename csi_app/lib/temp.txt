import 'package:csi_app/Main_padeview/PageView.dart';
import 'package:csi_app/Navbar/Navbar.dart';
import 'package:csi_app/Page/Concession/Concession.dart';
import 'package:csi_app/Page/Concession/Inner_Concession/App_request.dart';
import 'package:csi_app/Page/Concession/Inner_Concession/App_status.dart';
import 'package:csi_app/Page/More/More.dart';
import 'package:csi_app/Page/PageView/pageview.dart';
import 'package:csi_app/Page/Students/List.dart';
import 'package:csi_app/Page/profile/profile.dart';
import 'package:csi_app/Providers/NavbarProvider.dart';
import 'package:csi_app/Providers/User.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home:  MyHomePage(title: 'sad'),
    );
  }
}
final List<String> items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'];
class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
PageController _pageController = PageController();
  int _currentIndex = 0;

  void _onPageChanged(int index) {
    setState(() {
      _currentIndex = index;
    });
  }

  void _onItemTapped(int index) {
    _pageController.animateToPage(
      index,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }


  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return MultiProvider(
      providers: [
      ChangeNotifierProvider(create: (_)=>User_details()),
      ChangeNotifierProvider(create: (_)=>NavbarState())],
      builder: (context,child){
        final details=Provider.of<User_details>(context);
        final nav=Provider.of<NavbarState>(context);
      
        return LayoutBuilder(
        builder:(context, constraints) =>  Scaffold(
          appBar: AppBar(
            // TRY THIS: Try changing the color here to a specific color (to
            // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
            // change color while the other colors stay the same.
            backgroundColor: Theme.of(context).colorScheme.inversePrimary,
            // Here we take the value from the MyHomePage object that was created by
            // the App.build method, and use it to set our appbar title.
            title: Text(widget.title),
          ),
          body: PageView(
            controller: _pageController,
            children:[ SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: Center(
                child: Container(
                  width: double.infinity,
                  height: constraints.maxHeight,
                  color: Color.fromRGBO(214, 28, 223, 1),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: <Widget>[
                       const Text('DJSCI',style:TextStyle(color:Colors.white,
                      fontSize: 35,
                      fontWeight: FontWeight.w900,
                      ),
                      ),
                  
                        Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                         
                          ],
                        ),
                    
                   
                    ],
                  ),
                ),
              ),
            ),
            ],
          ),
          bottomNavigationBar: Navbar(state: nav,), // This trailing comma makes auto-formatting nicer for build methods.
        ),
      );
      },
    );
  }
}
